package sposp2;

//package pass2;
//public class pass2 {
//
//}
import java.io.*;
import java.util.*;

class pass2 {
  public static void main(String[] args) {
      try (
          BufferedWriter b1 = new BufferedWriter(new FileWriter("output3.txt"));
          BufferedReader b2 = new BufferedReader(new FileReader("intermedi1.txt"));
          BufferedReader b3 = new BufferedReader(new FileReader("symbol2.txt"));
          BufferedReader b4 = new BufferedReader(new FileReader("literal2.txt"))
      ) {
          String s;
          List<String> s1 = new ArrayList<>();
          List<String> s2 = new ArrayList<>();
          List<String> s3 = new ArrayList<>();
          
          // Reading intermediary file
          while ((s = b2.readLine()) != null) {
              StringTokenizer st = new StringTokenizer(s);
              while (st.hasMoreTokens()) {
                  s1.add(st.nextToken());
              }
          }

          // Reading symbol table
          while ((s = b3.readLine()) != null) {
              StringTokenizer st = new StringTokenizer(s);
              while (st.hasMoreTokens()) {
                  s2.add(st.nextToken());
              }
          }

          // Reading literal table
          while ((s = b4.readLine()) != null) {
              StringTokenizer st = new StringTokenizer(s);
              while (st.hasMoreTokens()) {
                  s3.add(st.nextToken());
              }
          }

          // Process the instructions
          for (int i = 0; i < s1.size(); i++) {
              // Check bounds before accessing s1[i+1] or s1[i-1]
              if (i + 1 < s1.size() && "AD".equals(s1.get(i)) && "01".equals(s1.get(i + 1))) {
                  b1.write(""); // Empty line for AD 01
              }
              
              // Process registers (check bounds for s1[i] in the loop)
              if (Arrays.asList("R1", "R2", "R3", "R4").contains(s1.get(i))) {
                  b1.write("\t" + s1.get(i) + "\n");
                  b1.write(" ");
              }

              // Process Instruction Set (IS)
              if (i - 1 >= 0 && i + 1 < s1.size() && "IS".equals(s1.get(i))) {
                  b1.write(s1.get(i - 1) + "\t" + s1.get(i + 1) + "\n");
              }

              // Process Literals
              if (i + 1 < s1.size() && "L".equals(s1.get(i))) {
                  for (int j = 0; j < s3.size(); j++) {
                      if (i + 1 < s1.size() && s1.get(i + 1).equals(s3.get(j))) {
                          if (j + 2 < s3.size()) { // Ensure there's no out of bounds error
                              b1.write("\t" + s3.get(j + 2) + "\n");
                          }
                      }
                  }
              }

              // Process Symbols
              if (i + 1 < s1.size() && "S".equals(s1.get(i))) {
                  for (int j = 0; j < s2.size(); j++) {
                      if (i + 1 < s1.size() && s1.get(i + 1).equals(s2.get(j))) {
                          if (j + 2 < s2.size()) { // Ensure there's no out of bounds error
                              b1.write("\t" + s2.get(j + 2) + "\n");
                          }
                      }
                  }
              }

              // Process DL
              if (i + 3 < s1.size() && "DL".equals(s1.get(i)) && "01".equals(s1.get(i + 1))) {
                  b1.write(s1.get(i - 1) + "\t" + "-" + "\t" + "-" + "\t" + "00" + s1.get(i + 3) + "\n");
              }

              // Process AD 02
              if (i + 3 < s1.size() && "AD".equals(s1.get(i)) && "02".equals(s1.get(i + 1))) {
                  b1.write(s1.get(i - 1) + "\t" + "-" + "\t" + "-" + "\t" + "00" + s1.get(i + 3) + "\n");
              }
          }
      } catch (IOException e) {
          e.printStackTrace();
      }
  }
}