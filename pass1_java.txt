package pass1;

//public class assi1 {
//
//	public static void main(String[] args) {
//		// TODO Auto-generated method stub


import java.io.*;
import java.util.*;

class assi1 {
    public static void main(String args[]) {
        int loc = 0, sym = 0, lit = 0, v = 0;
        String[][] s5 = new String[4][2]; // Literal Table
        String[] s1 = new String[4]; // Tokens
        String[] s2 = new String[4]; // Tokens from op.txt

        try (BufferedReader b1 = new BufferedReader(new FileReader("in.txt"));
             BufferedWriter b3 = new BufferedWriter(new FileWriter("symboltab.txt"));
             BufferedWriter b4 = new BufferedWriter(new FileWriter("intermediate.txt"));
             BufferedWriter b5 = new BufferedWriter(new FileWriter("literaltab.txt"));
             BufferedReader b2 = new BufferedReader(new FileReader("op.txt")))
        {
            String s, sl;
            while ((s = b1.readLine()) != null) {
                int flag = 0, m = 0;
                StringTokenizer st = new StringTokenizer(s);
                while (st.hasMoreTokens()) {
                    s1[m++] = st.nextToken();
                }
                if (s1[1].equals("START")) {
                    b4.write("AD 01  C " + s1[2]);
                    loc = Integer.parseInt(s1[2]);
                    b4.newLine();
                } else if (s1[1].equals("END")) {
                    for (int i = 1; i <= lit; i++) {
                        b4.write(loc + "  AD 02  C " + i);
                        loc++;
                        b4.newLine();
                    }
                } else {
                    b4.write(loc + "  ");
                    if (!s1[0].equals("-")) {
                        sym++;
                        b3.write(s1[0] + " " + loc);
                        b3.newLine();
                    }
                    // Process operation codes from op.txt
                    while ((sl = b2.readLine()) != null) {
                        StringTokenizer se = new StringTokenizer(sl);
                        int j = 0;
                        while (se.hasMoreTokens()) {
                            s2[j++] = se.nextToken();
                        }
                        if (s1[1].equals(s2[0])) {
                            b4.write("  " + s2[1] + " " + s2[2]);
                        } else if (s1[2].equals(s2[0])) {
                            b4.write("  " + s2[1]);
                        }
                    }
                    // Check for literals
                    if (s1[3].contains("=")) {
                        boolean found = false;
                        for (int i = 0; i < lit; i++) {
                            if (s5[i][1].equals(s1[3])) {
                                found = true;
                                b4.write(" L " + s5[i][0]);
                                break;
                            }
                        }
                        if (!found) {
                            lit++;
                            s5[v][0] = Integer.toString(lit);
                            s5[v][1] = s1[3];
                            b5.write(" " + lit + " " + s1[3]);
                            b4.write(" L " + lit);
                            v++;
                        }
                    } else if (s1[3].matches("[a-zA-Z]")) {
                        b4.write(" S " + sym);
                    }
                    loc++;
                    b4.newLine();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
